// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.24.3
// source: queue.proto

package queue

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// QueueWorkerServiceClient is the client API for QueueWorkerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QueueWorkerServiceClient interface {
	HandleJob(ctx context.Context, in *JobRequest, opts ...grpc.CallOption) (*JobResponse, error)
}

type queueWorkerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewQueueWorkerServiceClient(cc grpc.ClientConnInterface) QueueWorkerServiceClient {
	return &queueWorkerServiceClient{cc}
}

func (c *queueWorkerServiceClient) HandleJob(ctx context.Context, in *JobRequest, opts ...grpc.CallOption) (*JobResponse, error) {
	out := new(JobResponse)
	err := c.cc.Invoke(ctx, "/queue.QueueWorkerService/HandleJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueueWorkerServiceServer is the server API for QueueWorkerService service.
// All implementations must embed UnimplementedQueueWorkerServiceServer
// for forward compatibility
type QueueWorkerServiceServer interface {
	HandleJob(context.Context, *JobRequest) (*JobResponse, error)
	mustEmbedUnimplementedQueueWorkerServiceServer()
}

// UnimplementedQueueWorkerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedQueueWorkerServiceServer struct {
}

func (UnimplementedQueueWorkerServiceServer) HandleJob(context.Context, *JobRequest) (*JobResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandleJob not implemented")
}
func (UnimplementedQueueWorkerServiceServer) mustEmbedUnimplementedQueueWorkerServiceServer() {}

// UnsafeQueueWorkerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QueueWorkerServiceServer will
// result in compilation errors.
type UnsafeQueueWorkerServiceServer interface {
	mustEmbedUnimplementedQueueWorkerServiceServer()
}

func RegisterQueueWorkerServiceServer(s grpc.ServiceRegistrar, srv QueueWorkerServiceServer) {
	s.RegisterService(&QueueWorkerService_ServiceDesc, srv)
}

func _QueueWorkerService_HandleJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueueWorkerServiceServer).HandleJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/queue.QueueWorkerService/HandleJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueueWorkerServiceServer).HandleJob(ctx, req.(*JobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// QueueWorkerService_ServiceDesc is the grpc.ServiceDesc for QueueWorkerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var QueueWorkerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "queue.QueueWorkerService",
	HandlerType: (*QueueWorkerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HandleJob",
			Handler:    _QueueWorkerService_HandleJob_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "queue.proto",
}

// QueueListenerServiceClient is the client API for QueueListenerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QueueListenerServiceClient interface {
	RefreshJob(ctx context.Context, in *Job, opts ...grpc.CallOption) (*Job, error)
	SetJobReserved(ctx context.Context, in *Job, opts ...grpc.CallOption) (*Job, error)
}

type queueListenerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewQueueListenerServiceClient(cc grpc.ClientConnInterface) QueueListenerServiceClient {
	return &queueListenerServiceClient{cc}
}

func (c *queueListenerServiceClient) RefreshJob(ctx context.Context, in *Job, opts ...grpc.CallOption) (*Job, error) {
	out := new(Job)
	err := c.cc.Invoke(ctx, "/queue.QueueListenerService/RefreshJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queueListenerServiceClient) SetJobReserved(ctx context.Context, in *Job, opts ...grpc.CallOption) (*Job, error) {
	out := new(Job)
	err := c.cc.Invoke(ctx, "/queue.QueueListenerService/SetJobReserved", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueueListenerServiceServer is the server API for QueueListenerService service.
// All implementations must embed UnimplementedQueueListenerServiceServer
// for forward compatibility
type QueueListenerServiceServer interface {
	RefreshJob(context.Context, *Job) (*Job, error)
	SetJobReserved(context.Context, *Job) (*Job, error)
	mustEmbedUnimplementedQueueListenerServiceServer()
}

// UnimplementedQueueListenerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedQueueListenerServiceServer struct {
}

func (UnimplementedQueueListenerServiceServer) RefreshJob(context.Context, *Job) (*Job, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RefreshJob not implemented")
}
func (UnimplementedQueueListenerServiceServer) SetJobReserved(context.Context, *Job) (*Job, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetJobReserved not implemented")
}
func (UnimplementedQueueListenerServiceServer) mustEmbedUnimplementedQueueListenerServiceServer() {}

// UnsafeQueueListenerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QueueListenerServiceServer will
// result in compilation errors.
type UnsafeQueueListenerServiceServer interface {
	mustEmbedUnimplementedQueueListenerServiceServer()
}

func RegisterQueueListenerServiceServer(s grpc.ServiceRegistrar, srv QueueListenerServiceServer) {
	s.RegisterService(&QueueListenerService_ServiceDesc, srv)
}

func _QueueListenerService_RefreshJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Job)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueueListenerServiceServer).RefreshJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/queue.QueueListenerService/RefreshJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueueListenerServiceServer).RefreshJob(ctx, req.(*Job))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueueListenerService_SetJobReserved_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Job)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueueListenerServiceServer).SetJobReserved(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/queue.QueueListenerService/SetJobReserved",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueueListenerServiceServer).SetJobReserved(ctx, req.(*Job))
	}
	return interceptor(ctx, in, info, handler)
}

// QueueListenerService_ServiceDesc is the grpc.ServiceDesc for QueueListenerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var QueueListenerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "queue.QueueListenerService",
	HandlerType: (*QueueListenerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RefreshJob",
			Handler:    _QueueListenerService_RefreshJob_Handler,
		},
		{
			MethodName: "SetJobReserved",
			Handler:    _QueueListenerService_SetJobReserved_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "queue.proto",
}
